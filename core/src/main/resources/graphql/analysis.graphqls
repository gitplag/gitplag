scalar LocalDateTime

type Analysis {
    id: ID!,

    executionDate: LocalDateTime!,

    analyser: String!,

    language: String!,

    analysisPairs: [AnalysisPair]!
}

# Pair of two analysed and compared solutions
type AnalysisPair {

    # AnalysisPair id
    id: ID!

    # Name of first student
    student1: String!

    # Name of second student
    student2: String!

    # Count of matched lines
    lines: Int!

    # Percentage of similarity
    percentage: Int!

    # Pairs of matched lines
    analysisPairLines: [AnalysisPairLines]!
}

# Pairs of matched lines
type AnalysisPairLines {

    # AnalysisPairLines id
    id: ID!

    # Line "from" of the student1
    from1: Int!

    # Line "to" of the student1
    to1: Int!

    # Line "from" of the student2
    from2: Int!

    # Line "to" of the student2
    to2: Int!
}

type Query {

    # Get a result of the analysis of two solutions
    analysis(

    # Git service of the repository
    gitService: String!,

    # Name of the repository
    repo: String!):Analysis!

    # Run analysis for a repository
    analyse(

    # Git service of the repository
    gitService: String!,

    # Name of the repository
    repo: String!,

    # Branch to analyse
    branch: String!,

    # Chosen plagiarism analyser (moss/jplag)
    analyser: String,

    # Chosen programming language
    language: String):Analysis!

}